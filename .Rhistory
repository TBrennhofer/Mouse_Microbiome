Length = gsub("0.81.2", "0.8-1.2", Length, fixed = T)
) %>%
separate(Length, c("Length0","Length1"), fill = 'right', sep = '-') %>%
mutate(Length = ifelse(is.na(Length0), Length0,
ifelse(is.na(Length1), as.numeric(Length0),
(as.numeric(Length1) + as.numeric(Length0)) / 2))) %>%
mutate(Length = as.numeric(Length)) %>%
select(-Length0, -Length1)
# gram positive, motility, oxygen tolerance, sporulation
jgi <- jgi %>%
mutate(
Gram_positive = c(1,0)[match(Gram_positive, c('Gram+','Gram-'))],
Motility = c(1,1,0,0)[match(Motility, c('Motile','Chemotactic','Non-motile','Nonmotile'))],
Oxygen_tolerance = c(5,5,4,3,2,1,1)[match(jgi$Oxygen_tolerance,
c('Obligate aerobe','Aerobe','Microaerophilic','Facultative','Facultative anaerobe','Anaerobe','Obligate anaerobe'))],
Spore = c(1,1,0)[match(Spore, c('Non-sporulating','Nonsporulating','Sporulating'))])
#ph optimum
jgi <- jgi %>%
mutate(
pH_optimum = gsub(" |~", "", pH_optimum),
pH_optimum = ifelse(pH_optimum %in% c('acido-sensible','Notknown'), NA, pH_optimum)) %>%
separate(pH_optimum, c('pH0','pH1'), fill = 'right', sep = '-') %>%
mutate(pH_optimum = ifelse(is.na(pH0), pH0,
ifelse(is.na(pH1), as.numeric(pH0),
(as.numeric(pH1) + as.numeric(pH0)) / 2))) %>%
mutate(pH_optimum = as.numeric(pH_optimum)) %>%
select(-pH0, -pH1)
jgi <- jgi %>%
gather(trait, val, -Genus, -Species) %>%
filter(!is.na(val))
###################################################
# put it all together
x <- bind_rows(
mutate(ijsem, source = 'IJSEM'),
mutate(spo, source = 'Browne2016'),
mutate(bd, source = 'BacDrive'),
mutate(genos, source = 'NCBI'),
mutate(rrnDB, source = 'rrnDB'),
mutate(iga, source = 'Palm2014'),
mutate(bvit, source = 'Mag2015'),
mutate(jgi, source = 'JGI')
)
uncleaned <- nrow(x)
### I looked at all the points plotted using
#
#ggplot(x, aes(x = val)) + geom_density() + facet_wrap(~trait, scales = 'free')
# identifying and removing outliers
# remove inordinately large values...
##At some point, I would like/may want to use this slightly more stringent outlier filter
#x <- x %>%
#  filter(!(trait == 'Copies_16S' & val > 20)) %>%
#  filter(!(trait == 'GC_content' & (val > 80 | val < 20))) %>%
#  filter(!(trait == 'Gene_number' & val > 11000)) %>%
#  filter(!(trait == 'Genome_Mb' & val > 14)) %>%
#  filter(!(trait == 'Length' & (val > 12 | val <= 0))) %>%
#  filter(!(trait == 'pH_optimum' & val < 4)) %>%
#  filter(!(trait == 'Salt_optimum' & val > 25)) %>%
#  filter(!(trait == 'Temp_optimum' & val > 80)) %>%
#  filter(!(trait == 'Width' & (val > 4 | val <=0)))
x <- x %>%
filter(!(trait == 'Copies_16S' & val > 20)) %>%
filter(!(trait == 'GC_content' & (val > 80 | val < 20))) %>%
filter(!(trait == 'Gene_number' & val > 11000)) %>%
filter(!(trait == 'Genome_Mb' & val > 14)) %>%
filter(!(trait == 'Length' & val > 30)) %>%
filter(!(trait == 'pH_optimum' & val < 2.5)) %>%
filter(!(trait == 'Salt_optimum' & val > 25)) %>%
filter(!(trait == 'Temp_optimum' & val > 80)) %>%
filter(!(trait == 'Width' & val > 8))
print(paste(uncleaned - nrow(x), "outliers of", nrow(x), "data points were removed"))
#for plotting source-wise comparisons
x1 <- x
#calculate means among species. Log length/width data
x <- x %>%
mutate(Species = ifelse(Species == 'sp.', 'unclassified', Species)) %>%
group_by(Genus, Species, trait) %>%
summarise(val = mean(val, na.rm = T)) %>%
mutate(val = ifelse(trait %in% c('Length','Width'), log(val), val))
####################################################################
# DATA QUESTIONS
# Evaluating the accuracy of genus level means, by comparing variance
# Comparing trait data from different sources.
if (FALSE) {
###First let's look at how 16S copy number compares...
tmp <- bind_rows(
fread('data\\16S_13_5_precalculated_picrust.tab') %>%
transmute(
group = 'PICRUSt',
otu = paste0('otu',`#OTU_IDs`),
val = `16S_rRNA_Count`),
rrnDB %>%
filter(Species != 'unclassified') %>%
group_by(Genus, Species) %>%
summarise(group = 'rrnDB', val = mean(val)) %>%
left_join(ggtax[, c('Genus','Species','otu')], by = c('Genus','Species')) %>%
ungroup() %>%
select(-Genus, -Species)) %>%
group_by(group, otu) %>%
summarise(val = mean(val)) %>%
spread(group, val)
ggplot(tmp, aes(x = rrnDB, y = PICRUSt)) +
geom_abline(lty = 3, color = 'black') +
geom_jitter(width = 0.2, height = 0.2, alpha = 0.1) +
stat_smooth(method = 'lm', color = 'blue') +
th +
labs(x = '16S Copy numbers according to rrnDB', y = '16S Copy numbers according to PICRUSt')
## plotting coverages
x1 <- x1 %>%
filter(!Genus %in% c('02d06','1-68')) %>%
group_by(Genus, Species, trait, source) %>%
summarise(val = mean(val)) %>%
spread(source, val)
x1 %>%
filter(!is.na(IJSEM) & !is.na(NCBI)) %>%
ggplot(aes(x = IJSEM, y = NCBI)) +
geom_point() +
facet_wrap(~trait, scales = 'free')
x1 %>%
filter(!is.na(IJSEM) & !is.na(BacDrive)) %>%
ggplot(aes(x = IJSEM, y = BacDrive)) +
stat_smooth() +
geom_point() +
facet_wrap(~trait, scales = 'free')
sims <- x %>%
group_by(Genus, trait) %>%
filter(length(unique(Species)) > 2 | (trait == 'IgA' & length(unique(Species)) > 1)) %>%
summarise(
n = length(Genus),
mean = mean(val),
var = var(val)) %>%
group_by(trait, n) %>%
mutate(var_random = mean(replicate(100, var(sample(x$val[x$trait == trait[1]], size = n)))))
sims %>%
group_by(trait) %>%
filter(Genus %in% tax$Genus | trait == 'Spore_score') %>%
mutate(
rank = as.numeric(as.factor(jitter(mean))),
sd = sqrt(var)) %>%
ggplot(aes(x = mean, y = rank, color = trait)) +
geom_point() +
geom_errorbarh(aes(xmin = mean - sd, xmax = mean + sd)) +
facet_wrap(~trait, scales = 'free') +
theme(legend.position = 'none')
sims %>%
group_by(trait) %>%
arrange(mean) %>%
mutate(max = max(var, var_random)) %>%
ggplot(aes(x = var, y = var_random, color = trait)) +
geom_point(aes(size = n)) +
geom_point(aes(x = 0, y = 0), alpha = 0) +
geom_point(aes(x = max, y = max), alpha = 0) +
geom_abline(slope = 1, lty = 2) +
facet_wrap(~trait, scales = 'free')
sims %>%
ungroup() %>%
filter(Genus %in% tax$Genus) %>%
mutate(trait = ifelse(trait == 'Spore_score', 'Sporulation', trait)) %>%
group_by(trait) %>%
mutate(
diff = var_random - var,
max = max(abs(diff))) %>%
ggplot(aes(x = diff, fill = trait)) +
geom_density() +
geom_point(aes(x = -max, y = 0), alpha = 0) +
geom_point(aes(x = max, y = 0), alpha = 0) +
geom_vline(xintercept = 0, lty = 2) +
facet_wrap(~trait, scales = 'free') +
theme(legend.position = 'none',
axis.text = element_blank(),
axis.ticks = element_blank()) +
labs(x = 'Null variance - Observed variance',
y = 'Density of genera')
sims %>%
group_by(trait) %>%
mutate(
diff = var_random - var,
max = max(abs(diff)),
in_study = factor(as.character(Genus %in% tax$Genus), levels = c(TRUE, FALSE))) %>%
ggplot(aes(x = diff, fill = trait)) +
geom_histogram(aes(y =..density.., color = trait), bins = 30, alpha = 0) +
geom_density(alpha = 0.7, lty = 2, color = NA) +
geom_point(aes(x = -max, y = 0), alpha = 0) +
geom_point(aes(x = max, y = 0), alpha = 0) +
geom_vline(xintercept = 0, lty = 2) +
facet_wrap(~trait, scales = 'free') +
labs(x = 'Null variance - Observed variance', y = 'Density of genera') +
theme_bw() +
theme(
legend.position = 'none',
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
}
###################################################################################
# filter out all rows without species-level data that can be mapped onto greengenes OR
# doesn't exist in our data
# note, I lose a lot of data here; eventually, would like to use sequences to connect trait data to reference tree
x <- x %>%
spread(trait, val) %>%
inner_join(ggtax[, c('Genus','Species','otu')], by = c('Genus', 'Species')) %>%
mutate(otu = gsub('otu', '', otu)) %>%
filter(Species != 'unclassified' | otu %in% tax$otu)
# Add a last minute manual entry
#https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3346390/
x$Aggregation_score[x$Genus == 'Bifidobacterium' & x$Species != 'unclassified'] <- 1
# Merge spore scores (if no score and ijsem says 0, then 0;
# otherwise the median of spore score when we know for ijsem spore == 1
x <- x %>%
mutate(
Sporulation = ifelse(is.na(Spore_score),
ifelse(Spore < 0.5, 0, median(Spore_score[tax$Spore > 0], na.rm = T)), Spore_score)) %>%
ungroup() %>%
select(-Spore, -Spore_score)
#add bugbase trait preditions
bugdat <- fread('default_traits_precalculated_bugbase.txt') %>%
mutate(otu = as.character(V1), V1 = NULL)
x <- full_join(x, bugdat, by = 'otu')
#drop unwanted/redundant traits
x <- x %>%
mutate(
Aerobic = NULL,
Aggregation_score = NULL,
Contains_Mobile_Elements = NULL,
Facultatively_Anaerobic = NULL,
Genome_Mb = NULL,
Gram_positive = rowMeans(cbind(Gram_positive, Gram_Positive), na.rm=TRUE),
Gram_Positive = NULL,
Gram_Negative = NULL,
Oxygen_tolerance = NULL,
pH_optimum = NULL,
Potentially_Pathogenic = NULL,
Salt_optimum = NULL,
Stress_Tolerant = NULL,
Width = NULL) %>%
rename(
Obligate_anaerobe = Anaerobic,
Forms_biofilms = Forms_Biofilms)
saveRDS(x, file = 'traits_sparse.RDS')
#rm(list = ls())
#########PROTRAIT DATA SANDBOX
#prot <- fread('data\\ProTraits_binaryIntegratedPr0.90.txt')
#prot[prot == '?'] <- NA
#prot[, c(2:ncol(prot))] <- apply(prot[,c(2:ncol(prot))], 2, as.numeric)
#prot <- as.data.frame(prot)
#prot <- gather(prot, substrate, use, -Organism_name, -Tax_ID)
#prot <- filter(prot, !is.na(use))
#OTU ID doesn't work: table(tax$otu %in% paste0('otu',prot$Tax_ID))
# Genus species is a little better:
#table(paste(tax$Genus, tax$Species) %in% prot$Organism_name)
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
library(data.table)
library(tidyverse)
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
x <- readRDS('traits_sparse.RDS')
tax <- readRDS('ggtax.RDS')
#calculate genus-level means
x_genus_means <- x %>%
gather(trait, val, -otu) %>%
left_join(tax[, c('Genus','otu')], by = c('otu')) %>%
group_by(trait, Genus) %>%
filter(sum(!is.na(val)) > 0) %>%
mutate(val = ifelse(is.na(val), mean(val, na.rm = T), val)) %>%
spread(trait, val) %>%
ungroup() %>%
select(-Genus)
saveRDS(x_genus_means, file = 'traits_genus_means.RDS')
require(ape)
require(castor)
warnings()
install.packages('castor')
require(ape)
require(castor)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/99_otus.tree")
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/99_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
mytree$tip.label %>% head()
head(traits$otu)
table(traits$otu %in% mytree$tip.label)
head(traits$otu[!traits$otu %in% mytree$tip.label])
head(mytree$tip.label)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/97_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
table(traits$otu %in% mytree$tip.label)
head(tax$otu)
yo <- gsub('otu', '', tax$otu)
table(yo %in% mytree$tip.label)
tax <- readRDS('Reese2018_OTUs_wide.RDS')
head(tax)
table(tax %in% mytree$tip.label)
table(tax$otu %in% mytree$tip.label)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/99_otus.tree")
table(tax$otu %in% mytree$tip.label)
library(data.table)
library(tidyverse)
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
x <- readRDS('traits_sparse.RDS')
tax <- readRDS('ggtax.RDS')
require(ape)
require(castor)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/99_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
traits <- filter(traits, traits$otu %in% mytree$tip.label)
dim(traits)
library(data.table)
library(tidyverse)
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
x <- readRDS('traits_sparse.RDS')
tax <- readRDS('ggtax.RDS')
dim(x)
str(x)
yo <- as.numeric(x$otu)
head(yo)
ps <- mytree$tip.label
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
source('C:\\Users\\John\\Documents\\msu\\Mouse_Microbiome\\custom_functions.R')
library(data.table)
library(tidyverse)
#load full picrust/greengenes taxonomy
ggtax <- readRDS('ggtax.RDS')
ggtax <- mutate_all(ggtax, as.character)
table(ggtax$otu %in% ps)
head(ps)
head(ggtax$otu)
table(gsub("otu", "", ggtax$otu) %in% ps)
head(ggtax$otu[!gsub("otu", "", ggtax$otu) %in% ps])
# In this script, I use two different methods to estimate missing trait data.
# In the first, I use genus-level means if there are any species data available,
# In the second, I use PICRUSt-based inference
library(data.table)
library(tidyverse)
wd <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
x <- readRDS('traits_sparse.RDS')
tax <- readRDS('ggtax.RDS')
require(ape)
require(castor)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/99_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
traits <- filter(traits, traits$otu %in% mytree$tip.label)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/97_otus.tree")
table(otus_wide$otu %in% mytree$tip.label)
require(ape)
require(castor)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/97_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
#have to do this because the FULL greengenes taxonomy (I think) has OTUs for all levels of tree resolution (97, 99), and we just want 97
traits <- filter(traits, traits$otu %in% mytree$tip.label)
dat <- data.frame(
otu = character(),
trait = character(),
val = numeric(), stringsAsFactors = FALSE)
for(i in names(traits)[names(traits) != 'otu']) {
mytips <- traits[[i]][match(mytree$tip.label, traits$otu)]
#out <- hsp_independent_contrasts(mytree, mytips)
out <- hsp_subtree_averaging(mytree, mytips)
tmp <- data.frame(
otu = mytree$tip.label,
trait = i,
val = out$states[1:length(mytips)], stringsAsFactors = FALSE)
dat <- bind_rows(dat, tmp)
}
class(mytree$tip.label)
require(ape)
require(castor)
mytree <- read.tree("C:/Users/John/Documents/msu/picrust-1.1.2/97_otus.tree")
traits <- as.data.frame(readRDS('traits_sparse.RDS'))
#have to do this because the FULL greengenes taxonomy (I think) has OTUs for all levels of tree resolution (97, 99), and we just want 97
traits <- filter(traits, traits$otu %in% mytree$tip.label)
dat <- data.frame(
otu = character(),
trait = character(),
val = numeric(), stringsAsFactors = FALSE)
names(traits)[names(traits) != 'otu']
i <- 'B_vitamins'
traits[[i]]
mytips <- traits[[i]][match(mytree$tip.label, traits$otu)]
#out <- hsp_independent_contrasts(mytree, mytips)
out <- hsp_subtree_averaging(mytree, mytips)
tmp <- data.frame(
otu = mytree$tip.label,
trait = i,
val = out$states[1:length(mytips)], stringsAsFactors = FALSE)
dat <- bind_rows(dat, tmp)
dat <- data.frame(
otu = character(),
trait = character(),
val = numeric(), stringsAsFactors = FALSE)
for(i in names(traits)[!names(traits) %in% c('otu','Genus','Species')]) {
mytips <- traits[[i]][match(mytree$tip.label, traits$otu)]
#out <- hsp_independent_contrasts(mytree, mytips)
out <- hsp_subtree_averaging(mytree, mytips)
tmp <- data.frame(
otu = mytree$tip.label,
trait = i,
val = out$states[1:length(mytips)], stringsAsFactors = FALSE)
dat <- bind_rows(dat, tmp)
}
dat <- dat %>%
mutate(
otu = factor(paste0('otu',otu)),
trait = factor(trait))
tmp1 <- filter(dat, trait == 'Copies_16S') %>%
select(-trait) %>%
rename(Copies_16S_rrnDB = val)
tmp2 <- fread('16S_13_5_precalculated_picrust.tab')
names(tmp2) <- c('otu','Copies_16S_PICRUSt')
tmp2$otu <- paste0('otu',tmp2$otu)
x <- left_join(tmp1, tmp2)
x <- filter(x, otu %in% otus$otu)
head(x)
head(dat)
dim(dat)
head(tax$otu)
head(x$otu)
x <- readRDS('traits_sparse.RDS')
x <- readRDS('traits_sparse.RDS')
head(x$otu)
table(paste0('otu',x$otu) %in% dat$otu)
#saveRDS(dat, file = 'data\\traits_castor_independent_contrasts.RDS')
saveRDS(dat, file = 'traits_castor_subtree_averaging.RDS')
# load packages and custom functions
wd <- 'C:\\Users\\John\\Documents\\msu\\Mouse_Microbiome\\'
wd_dat <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
source(paste0(wd, 'custom_functions.R'))
loadpax(pkg = c('tidyverse','knitr','data.table','vegan', 'ape'))
#set directory for printed images/figures
image_dir <- paste0(wd, 'images\\')
# load data
x_raw <- fread(pasate0(wd_dat, '2018_06_12_run2_otus.csv'))
tax <- fread(pasate0(wd_dat, 'otus_table_joined_taxa.txt'))
traits <- fread(pasate0(wd_dat, 'traits_castor_subtree_averaging.RDS'))
#Organize tax data into traditional classifications
tax <- tax %>%
rename(otu = `#OTU ID`, tax = taxonomy) %>%
mutate(tax = gsub("\\s|.__|\\[|\\]|Other", "", tax)) %>%
separate(tax, sep = ';', c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), fill = 'right')
tax <- as.data.frame(apply(tax, 2, function(x) ifelse(x == '', 'unclassified', x)), stringsAsFactors = FALSE)
tax$otu <- as.numeric(tax$otu)
if(FALSE) {
saveRDS(tax, file = 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\Reese2018_OTUs_wide.RDS')
}
# Note that, oddly, x[130,4719] is 'NA'. I'm assuming it is zero...?
x <- as.data.frame(x_raw)
is.na(x[130,4719])
x[130,4719] <- 0
#remove samples with fewer than 5000 reads.
x <- x[rowSums(x[c(11:ncol(x))]) >= 5000, ]
#remove cage 310 because mouse dies
#x <- x[x$`Cage#` != 310, ]
#ensure all OTUs occur at least once after removing samples
x <- bind_cols(x[, c(1:10)], x[, c(11:ncol(x))[colSums(x[,c(11:ncol(x))]) > 0]])
#save unrarified version of data?
x_unrarified <- x
#rarefy to 5000
tmp <- x[,c(11:ncol(x))]
tmp <- tmp[rowSums(tmp) >= 5000,]
tmp <- rrarefy(tmp, 5000)
x <- bind_cols(x[, c(1:10)], as.data.frame(tmp))
#create wide table for distance calculations
x <- x %>%
mutate(Mouse = floor(SampleID)) %>%
select(-Day, -Run, -Reads, -`Cage#`, -SampleID)
#fix data entry problems
x$Cohoused[x$Mouse == 3 & x$Hour == 168] <- 'N'
x$Cohoused[x$Mouse == 6 & x$Hour == 168] <- 'N'
x$Cohoused[x$Mouse == 7 & x$Hour == 168] <- 'Y'
x$Pair[x$Mouse == 7 & x$Hour == 168] <- 4
x$Abx[x$Mouse == 7 & x$Hour == 168] <- 'Y'
x$Dose[x$Mouse == 7 & x$Hour == 168] <- 'Recovery'
x$Cohoused[x$Mouse == 9 & x$Hour == 168] <- 'Y'
x$Pair[x$Mouse == 9 & x$Hour == 168] <- 2
x$Abx[x$Mouse == 9 & x$Hour == 168] <- 'N'
x$Dose[x$Mouse == 9 & x$Hour == 168] <- 'No'
x$Cohoused[x$Mouse == 12 & x$Hour == 168] <- 'N'
x$Cohoused[x$Mouse == 16 & x$Hour == 168] <- 'N'
#save wide table for later
x_wide <- x
if (FALSE) {
saveRDS(x_wide, file = 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\Reese2018_OTUs_wide.RDS')
}
#cleanup, make narrow table
# I could relativize to a percent here, but why?
x <- x %>%
gather(otu, abun, -Mouse, -Abx, -Hour, -Cohoused, -Dose, -Pair) %>%
group_by(Mouse, Abx, Hour, Cohoused, Dose, Pair, otu) %>%
summarise(abun = sum(abun)) %>%
mutate(otu = as.numeric(otu))
#set up phyloseq object for UniFrac distances.
#Want to do it but can't until I make a tree...
#Set plotting theme
th <- theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank())
# load packages and custom functions
wd <- 'C:\\Users\\John\\Documents\\msu\\Mouse_Microbiome\\'
wd_dat <- 'C:\\Users\\John\\Google Drive\\Mouse_Microbiome_Shared_Files\\Data\\'
setwd(wd)
source(paste0(wd, 'custom_functions.R'))
loadpax(pkg = c('tidyverse','knitr','data.table','vegan', 'ape'))
#set directory for printed images/figures
image_dir <- paste0(wd, 'images\\')
# load data
x_raw <- fread(pasate0(wd_dat, '2018_06_12_run2_otus.csv'))
